/**
 * Copyright (c), Klass&Ihlenfeld Verlag GmbH
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *    * Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of the Klass&Ihlenfeld Verlag GmbH nor the names of its
 *      contributors may be used to endorse or promote products derived from
 *      this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: Alexander Merz, am@golem.de
 */
 
var bleno = require('./index');
var util = require('util');
var fs = require('fs');
var	exec = require('child_process').exec;

var LED_PIN = 17;
var BTN_PIN = 21;

var BlenoPrimaryService = bleno.PrimaryService;
var BlenoCharacteristic = bleno.Characteristic;
var BlenoDescriptor = bleno.Descriptor;

var buttonValue = null;
var lastButtonState = '';
var onButtonStateCallback = null;

// LED Read Characteristic
function LedReadCharacteristic() {
  LedReadCharacteristic.super_.call(this, {
    uuid: '6ee494e0bb8711e3891a0002a5d5c51b',
    properties: ['read', 'notify'],
    descriptors: [
      new BlenoDescriptor({
        uuid: '792e3fa0bb8711e390640002a5d5c51b',
        value: 'Led read'
      })
    ]
  });
}

util.inherits(LedReadCharacteristic, BlenoCharacteristic);

LedReadCharacteristic.prototype.onReadRequest = function(offset, callback) {
  if (offset) {
    callback(BlenoCharacteristic.RESULT_ATTR_NOT_LONG, null);
  } else {
  	if(null != buttonValue) {
		callback(BlenoCharacteristic.RESULT_SUCCESS, buttonValue);    	
	};  	
  }
};

LedReadCharacteristic.prototype.onSubscribe = function(maxValueSize, updateValueCallback) {
	onButtonStateCallback = updateValueCallback;
};

// LED Write Characteristic
function LedWriteCharacteristic() {
  LedWriteCharacteristic.super_.call(this, {
    uuid: '6ee494e0bb8711e3891a0002a5d5c51c',
    properties: ['write'],
    descriptors: [
      new BlenoDescriptor({
        uuid: '792e3fa0bb8711e390640002a5d5c51c',
        value: 'Led write'
      })
    ]
  });
}

util.inherits(LedWriteCharacteristic, BlenoCharacteristic);

LedWriteCharacteristic.prototype.onWriteRequest = function(data, offset, withoutResponse, callback) {
	if (offset) {
    	callback(this.RESULT_ATTR_NOT_LONG);
	}	
	var value = data.readUInt8(0);
	console.log("Wert: "+value);
	
	callback(BlenoCharacteristic.RESULT_SUCCESS, data);
	
	switchLed(value, function(res) {
		console.log("Ergebnis: "+value);
	});	
};

// LED Service
function LedService() {
  LedService.super_.call(this, {
    uuid: '5dfeb700bb8711e393430002a5d5c51b',
    characteristics: [
      new LedReadCharacteristic()
      , new LedWriteCharacteristic()
    ]
  });
}

util.inherits(LedService, BlenoPrimaryService);


// Bleno init
bleno.on('stateChange', function(state) {
  console.log('on -> stateChange: ' + state);

  if (state === 'poweredOn') {
    bleno.startAdvertising('led', []);
    
    // start button check
    setInterval(getButtonState, 200);
  } else {
    bleno.stopAdvertising();
  }
});

bleno.on('advertisingStart', function(error) {
  console.log('on -> advertisingStart: ' + (error ? 'error ' + error : 'success'));
  
  if (!error) {
    bleno.setServices([
		new LedService()
    ]);
  }
});

function buttonStateChanged() {
	if(null != onButtonStateCallback) {
		if(null == buttonValue) {
			onButtonStateCallback(BlenoCharacteristic.RESULT_UNLIKELY_ERROR);
		} else {
		console.log(buttonValue);
			onButtonStateCallback(buttonValue);	
		}
	}
}


function logError(err, stdout, stderr) {
	if(err) {
		console.log(err);
	}
}


function switchLed(value, done) {

	return fs.exists("/sys/class/gpio/gpio"+LED_PIN, function(exists) {
		
		if(!exists) {
			exec('echo "'+LED_PIN+'" > /sys/class/gpio/export', logError);
			exec('echo "out" > /sys/class/gpio/gpio'+LED_PIN+'/direction', logError);
			exec('echo "0" > /sys/class/gpio/gpio'+LED_PIN+'/value', logError);				
		} 
			
		if(value != 0) {
			exec('echo "1" > /sys/class/gpio/gpio'+LED_PIN+'/value', logError);	
		} else {
			exec('echo "0" > /sys/class/gpio/gpio'+LED_PIN+'/value', logError);		
		}		
		
		return done(true);		
	});

}

/*
Check the state of the button
*/
function getButtonState() {
	return fs.exists("/sys/class/gpio/gpio"+BTN_PIN, function(exists) {
		
		if(!exists) {
			exec('echo "'+BTN_PIN+'" > /sys/class/gpio/export', logError);
			exec('echo "in" > /sys/class/gpio/gpio'+BTN_PIN+'/direction', logError);
		} 			
		
		var sc = fs.readFileSync('/sys/class/gpio/gpio'+BTN_PIN+'/value', 'utf-8');		
		
		var buffer = new Buffer(1);
		
		buffer.writeUInt8(parseInt(sc),0);
				
		buttonValue = buffer;
		
		// notify only in case of a state change
		if(sc != lastButtonState) {
			lastButtonState = sc;
			buttonStateChanged();
		}
				
	});
}

