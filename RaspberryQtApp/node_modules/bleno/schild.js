var util = require('util');
var bleno = require('bleno');


var TuerschildService = bleno.PrimaryService;
var ConfigCharacteristic = bleno.Characteristic;
var RevisionNoCharacteristic = bleno.Characteristic;
var PersonCharacteristic = bleno.Characteristic;
var BlenoDescriptor = bleno.Descriptor;

var RoomName = new Buffer(18);
var RoomId   = 0;
var RevNumber = 0;
var Persons  = new Array(16);
var PersonIndex = 0;

console.log('Tuerschild start');

RoomName.fill(0);
RoomName.write("NoRoomName");

for (var i = 0; i < Persons.length; ++i)
  Persons[i] = new Array(20);

// Configuration

var f_ConfigCharacteristic = function() {
  f_ConfigCharacteristic.super_.call(this, {
    uuid: '1337000042011000800000805f9b34fb',
    properties: ['read','write']
  });
};

util.inherits(f_ConfigCharacteristic, ConfigCharacteristic);

f_ConfigCharacteristic.prototype.onReadRequest = function(offset, callback) {
  var result = this.RESULT_SUCCESS;
  var data = new Buffer(28);
//  var data = new Buffer("HelloWorld12345678901234567890");

  data.writeUInt16LE(RoomId,0);
  data.write(RoomName.toString(),2);

  if (offset > data.length) {
    result = this.RESULT_INVALID_OFFSET;
    data = null;
  }
  console.log("Read config");
  callback(result, data);
};

f_ConfigCharacteristic.prototype.onWriteRequest = function(data, offset, withoutResponse, callback) {
  console.log('write request: ' + data.toString('hex') + ' ' + offset + ' ' + withoutResponse);
  var result = this.RESULT_SUCCESS;
  
  if(data.length != 20)
  {
    callback(this.RESULT_INVALID_OFFSET);
  }else
  {
    RoomId = data.readUInt16LE(0);
    data.copy(RoomName,0,2,21);

    console.log("Write config: RoomId" + RoomId + " RoomName:" + RoomName.toString());
    callback(this.RESULT_SUCCESS);
  }
};


//Revisionsnummer

var f_RevisionNoCharacteristic = function() {
  f_RevisionNoCharacteristic.super_.call(this, {
    uuid: '1337000042021000800000805f9b34fb',
    properties: ['read','write']
  });
};

util.inherits(f_RevisionNoCharacteristic, RevisionNoCharacteristic);

f_RevisionNoCharacteristic.prototype.onReadRequest = function(offset, callback) {
  var result = this.RESULT_SUCCESS;
  var data = new Buffer(4);
  data.writeUInt32LE(RevNumber,0);

  if (offset > data.length) {
    result = this.RESULT_INVALID_OFFSET;
    data = null;
  }
  console.log("Read RevNo");
  callback(result, data);
};

f_RevisionNoCharacteristic.prototype.onWriteRequest = function(data, offset, withoutResponse, callback) {
  console.log('write request: ' + data.toString('hex') + ' ' + offset + ' ' + withoutResponse);
  var result = this.RESULT_SUCCESS;
  var newRevNumber
  newRevNumber = data.readUInt32LE(0);

  if(newRevNumber > RevNumber)
  {
     RevNumber = newRevNumber;
     callback(this.RESULT_SUCCESS);
//TODO: Send Data to Display and File;
  }

  console.log("Write Person:" + RevNumber);
  callback(this.RESULT_SUCCESS);
};

//Personen

var f_PersonCharacteristic = function() {
  f_PersonCharacteristic.super_.call(this, {
    uuid: '1337000042031000800000805f9b34fb',
    properties: ['write']
  });
};

util.inherits(f_PersonCharacteristic, PersonCharacteristic);

f_PersonCharacteristic.prototype.onWriteRequest = function(data, offset, withoutResponse, callback) {
  console.log('write request: ' + data.toString('hex') + ' ' + offset + ' ' + withoutResponse);
  var result = this.RESULT_SUCCESS;
  
  if(PersonIndex<16)
  {
    var Name = new Buffer(20)
    data.copy(Name,0,0,20);
    Persons[PersonIndex]=Name.toString();
    PersonIndex++;

    console.log("Write RevNo:" + RevNumber);
    callback(this.RESULT_SUCCESS);
  }else
  {
    callback(this.RESULT_INVALID_OFFSET);
  }
};



//Service

function f_TuerschildService() {
  f_TuerschildService.super_.call(this, {
    uuid: '1337000042001000800000805f9b34fb',
    characteristics: [
      new f_ConfigCharacteristic(),
      new f_RevisionNoCharacteristic(),
      new f_PersonCharacteristic()
    ]
  });
}

util.inherits(f_TuerschildService, TuerschildService);

bleno.on('stateChange', function(state) {
  console.log('on -> stateChange: ' + state);

  if (state === 'poweredOn') {
    console.log(RoomName.toString());
    bleno.startAdvertising(RoomName.toString(), ['1337000042001000800000805f9b34fb']);
  } else {
    bleno.stopAdvertising();
  }
});


// FileIO

function SaveConfigToFile()
{

}

// Linux only events /////////////////
bleno.on('accept', function(clientAddress) {
  console.log('on -> accept, client: ' + clientAddress);

  bleno.updateRssi();
});

bleno.on('disconnect', function(clientAddress) {
  console.log('on -> disconnect, client: ' + clientAddress);
});

bleno.on('rssiUpdate', function(rssi) {
  console.log('on -> rssiUpdate: ' + rssi);
});
//////////////////////////////////////

bleno.on('advertisingStart', function(error) {
  console.log('on -> advertisingStart: ' + (error ? 'error ' + error : 'success'));

  if (!error) {
    bleno.setServices([
      new f_TuerschildService()
    ]);
  }
});

bleno.on('advertisingStop', function() {
  console.log('on -> advertisingStop');
});

bleno.on('servicesSet', function() {
  console.log('on -> servicesSet');
});
