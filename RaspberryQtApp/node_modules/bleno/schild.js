var util  = require('util');
var net   = require('net');
var bleno = require('bleno');
var fs    = require('fs');

console.log('This is schild!');

var TuerschildService        = bleno.PrimaryService;
var ConfigCharacteristic     = bleno.Characteristic;
var RevisionNoCharacteristic = bleno.Characteristic;
var PersonCharacteristic     = bleno.Characteristic;
var BlenoDescriptor          = bleno.Descriptor;

var RoomName         = new Buffer(18);
var RoomId           = 42;
var RevNumber        = 0;
var Persons          = new Array(16);
var PersonIndex      = 0;

var newOccupants    = new Array(16);
var numNewOccupants = 0;

RoomName.fill(0);
RoomName.write("Raum 42");
for (var i = 0; i < Persons.length; ++i)
  Persons[i] = new Array(20);

loadConfig();

// Set up GUI coupling...
var guiSocket = net.Socket();
guiSocket.connect("/tmp/ble_coupling");
console.log('connected to GUI');
updateGUI();

// Configuration

var f_ConfigCharacteristic = function() {
  f_ConfigCharacteristic.super_.call(this, {
    uuid: '1337000042011000800000805f9b34fb',
    properties: ['read','write']
  });
};

util.inherits(f_ConfigCharacteristic, ConfigCharacteristic);

f_ConfigCharacteristic.prototype.onReadRequest = function(offset, callback) {
  var result = this.RESULT_SUCCESS;
  var data = new Buffer(20);

  data.writeUInt16LE(RoomId, 0);
  data.write(RoomName.toString(), 2);

  if (offset > data.length) {
    result = this.RESULT_INVALID_OFFSET;
    data = null;
  }
  console.log("Read config");
  callback(result, data);
};

f_ConfigCharacteristic.prototype.onWriteRequest = function(data, offset, withoutResponse, callback) {
  console.log('write request: ' + data.toString('hex') + ' ' + offset + ' ' + withoutResponse);
  var result = this.RESULT_SUCCESS;
  
  if((data.length < 3) || (data.length > 20)) {
    callback(this.RESULT_INVALID_OFFSET);
  }
  else {
    RoomId = data.readUInt16LE(0);
    data.copy(RoomName, 0, 2);

    updateGUI();
    saveConfig();

    console.log("Write config: RoomId" + RoomId + " RoomName:" + aRoomName);
    callback(this.RESULT_SUCCESS);
  }
};


//Revisionsnummer

var f_RevisionNoCharacteristic = function() {
  f_RevisionNoCharacteristic.super_.call(this, {
    uuid: '1337000042021000800000805f9b34fb',
    properties: ['read','write']
  });
};

util.inherits(f_RevisionNoCharacteristic, RevisionNoCharacteristic);

f_RevisionNoCharacteristic.prototype.onReadRequest = function(offset, callback) {
  var result = this.RESULT_SUCCESS;
  var data = new Buffer(4);
  data.writeUInt32LE(RevNumber,0);

  if (offset > data.length) {
    result = this.RESULT_INVALID_OFFSET;
    data = null;
  }
  console.log("Read RevNo");
  callback(result, data);
};

f_RevisionNoCharacteristic.prototype.onWriteRequest = function(data, offset, withoutResponse, callback) {
  console.log('write request: ' + data.toString('hex') + ' ' + offset + ' ' + withoutResponse);
  var result = this.RESULT_SUCCESS;
  var newRevNumber = data.readUInt32LE(0);

  console.log('revision number set to ' + newRevNumber);

  if(newRevNumber > RevNumber) {
    console.log('updating due to increased revision number...');
    RevNumber = newRevNumber;

    Persons         = newOccupants;
    PersonIndex     = numNewOccupants;
    newOccupants    = new Array(16);
    numNewOccupants = 0;

    updateGUI();
    saveConfig();
  }

  callback(this.RESULT_SUCCESS);
};

//Personen

var f_PersonCharacteristic = function() {
  f_PersonCharacteristic.super_.call(this, {
    uuid: '1337000042031000800000805f9b34fb',
    properties: ['write']
  });
};

util.inherits(f_PersonCharacteristic, PersonCharacteristic);

f_PersonCharacteristic.prototype.onWriteRequest = function(data, offset, withoutResponse, callback) {
  console.log('write request: ' + data.toString('hex') + ' ' + offset + ' ' + withoutResponse);
  var result = this.RESULT_SUCCESS;

  if(numNewOccupants < 16) {
    newOccupants[numNewOccupants] = data.toString();
    console.log("occupant " + numNewOccupants + " set to " + newOccupants[numNewOccupants]);
    numNewOccupants++;
    callback(this.RESULT_SUCCESS);
  }
  else {
    callback(this.RESULT_INVALID_OFFSET);
  }
};



//Service

function f_TuerschildService() {
  f_TuerschildService.super_.call(this, {
    uuid: '1337000042001000800000805f9b34fb',
    characteristics: [
      new f_ConfigCharacteristic(),
      new f_RevisionNoCharacteristic(),
      new f_PersonCharacteristic()
    ]
  });
}

util.inherits(f_TuerschildService, TuerschildService);

bleno.on('stateChange', function(state) {
  console.log('on -> stateChange: ' + state);

  if (state === 'poweredOn') {
    console.log(RoomName.toString());
    bleno.startAdvertising(RoomName.toString(), ['1337000042001000800000805f9b34fb']);
  } else {
    bleno.stopAdvertising();
  }
});


// GUI
function updateGUI() {
    {
        var aRoomName = RoomName.toString();
        var buffer    = Uint8Array(2);
        buffer[0] = 0;
        buffer[1] = aRoomName.length;
        guiSocket.write(Buffer(buffer));
        guiSocket.write(Buffer(aRoomName));
    }

    {
        var buffer = Uint8Array(1);
        buffer[0]  = 2;
        guiSocket.write(Buffer(buffer));
    }
    for (i = 0; i < PersonIndex; i++) {
        var anOccupantName = Persons[i];
        var buffer        = Uint8Array(2);
        buffer[0] = 1;
        buffer[1] = anOccupantName.length;
        guiSocket.write(Buffer(buffer));
        guiSocket.write(Buffer(anOccupantName));
    }
}

// FileIO

function saveConfig() {
    var pairs = new Object();
    pairs['room_name']     = RoomName.toString();
    pairs['rev_no']        = RevNumber;
    pairs['num_occupants'] = PersonIndex;
    for (i = 0; i < PersonIndex; i++) {
        pairs['occupant_' + i] = Persons[i];
    }

    var content = '';
    for (pair in pairs) {
        console.log('pair.key=' + pair + ', value=' + pairs[pair]);
        content = content + pair + '=' + pairs[pair] + '\n';
    }

    fs.writeFileSync('/opt/schild/schild_state', content);
}

function loadConfig() {
    var fileContents = fs.readFileSync('/opt/schild/schild_state').toString();
    console.log('contents=' + fileContents);

    var lines = fileContents.split('\n');
    console.log('lines=' + lines);

    var pairs = new Object();
    for (i = 0; i < lines.length; i++) {
        var line = lines[i];
        var tokens = line.split('=');
        if (tokens.length != 2)
            continue;
        console.log('    tokens=' + tokens + ', num=' + tokens.length);

        var key   = tokens[0];
        var value = tokens[1];
        key   = key.trim();
        value = value.trim();
        pairs[key] = value;
    }

    // Apply...
    RoomName.fill(0);
    RoomName.write(pairs['room_name']);
    RevNumber = parseInt(pairs['rev_no']);
    PersonIndex = parseInt(pairs['num_occupants']);
    for (i = 0; i < PersonIndex; i++) {
        Persons[i] = pairs['occupant_' + i];
        console.log('___person=' + Persons[i]);
    }
}

// Linux only events /////////////////
bleno.on('accept', function(clientAddress) {
  console.log('on -> accept, client: ' + clientAddress);

  bleno.updateRssi();
});

bleno.on('disconnect', function(clientAddress) {
  console.log('on -> disconnect, client: ' + clientAddress);
});

bleno.on('rssiUpdate', function(rssi) {
  console.log('on -> rssiUpdate: ' + rssi);
});
//////////////////////////////////////

bleno.on('advertisingStart', function(error) {
  console.log('on -> advertisingStart: ' + (error ? 'error ' + error : 'success'));

  if (!error) {
    bleno.setServices([
      new f_TuerschildService()
    ]);
  }
});

bleno.on('advertisingStop', function() {
  console.log('on -> advertisingStop');
});

bleno.on('servicesSet', function() {
  console.log('on -> servicesSet');
});
